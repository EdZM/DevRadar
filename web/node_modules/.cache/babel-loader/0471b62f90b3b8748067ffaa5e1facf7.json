{"ast":null,"code":"import _slicedToArray from \"D:\\\\Arquivos_-_USP\\\\Cursos\\\\OmniStack\\\\web\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/slicedToArray\";\nvar _jsxFileName = \"D:\\\\Arquivos_-_USP\\\\Cursos\\\\OmniStack\\\\web\\\\src\\\\components\\\\DevForm\\\\index.js\";\nimport React, { useState, useEffect } from 'react';\nimport './styles.css';\n\nfunction DevForm({\n  onSubmit\n}) {\n  const _useState = useState(''),\n        _useState2 = _slicedToArray(_useState, 2),\n        github_username = _useState2[0],\n        setGithub_username = _useState2[1];\n\n  const _useState3 = useState(''),\n        _useState4 = _slicedToArray(_useState3, 2),\n        techs = _useState4[0],\n        setTechs = _useState4[1];\n\n  const _useState5 = useState(''),\n        _useState6 = _slicedToArray(_useState5, 2),\n        latitude = _useState6[0],\n        setLatitude = _useState6[1]; // [] é vetor\n\n\n  const _useState7 = useState(''),\n        _useState8 = _slicedToArray(_useState7, 2),\n        longitude = _useState8[0],\n        setLongitude = _useState8[1]; // quando algo for digitado em um dos campos eu terei acesso em tempo real desses dados\n\n\n  useEffect(() => {\n    navigator.geolocation.getCurrentPosition( // Em algum momento, o navegador vai me perguntar se eu permito que ele pegue minha localização. A permissão só precisa ser dada uma vez\n    position => {\n      const _position$coords = position.coords,\n            latitude = _position$coords.latitude,\n            longitude = _position$coords.longitude; // cada vez que eu chamo essas funções abaixo, os estados são atualizados e o HTML é processado novamente com as alterações\n\n      setLatitude(latitude);\n      setLongitude(longitude);\n      console.log(position);\n    }, err => {\n      console.log(err);\n    }, {\n      timeout: 30000\n    });\n  }, []);\n\n  async function handleSubmit(e) {\n    e.preventDefault();\n    await onSubmit({\n      // como handleAddDev é assincrona pode-se aguardar sua finalização usando o await\n      github_username,\n      techs,\n      latitude,\n      longitude\n    }); // os valores o usuario do git e tecnologias é zerado \n    // isso só ocorre depois que onSubmit, finalizar\n\n    setGithub_username('');\n    setTechs('');\n  }\n\n  return React.createElement(\"form\", {\n    onSubmit: handleSubmit\n    /* função disparada quando o usuario aperta para salvar*/\n    ,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 55\n    },\n    __self: this\n  }, React.createElement(\"div\", {\n    className: \"input-block\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 56\n    },\n    __self: this\n  }, React.createElement(\"label\", {\n    htmlFor: \"github_username\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 57\n    },\n    __self: this\n  }, \"Usu\\xE1rio do Github\"), React.createElement(\"input\", {\n    name: \"github_username\",\n    id: \"github_username\",\n    required: true,\n    value: github_username,\n    onChange: e => setGithub_username(e.target.value) // e é de evento\n    ,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 58\n    },\n    __self: this\n  })), React.createElement(\"div\", {\n    className: \"input-block\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 67\n    },\n    __self: this\n  }, React.createElement(\"label\", {\n    htmlFor: \"techs\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 68\n    },\n    __self: this\n  }, \"Tecnologias\"), React.createElement(\"input\", {\n    name: \"techs\",\n    id: \"techs\",\n    required: true,\n    value: techs,\n    onChange: e => setTechs(e.target.value),\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 69\n    },\n    __self: this\n  })), React.createElement(\"div\", {\n    className: \"input-group\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 78\n    },\n    __self: this\n  }, React.createElement(\"div\", {\n    className: \"input-block\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 79\n    },\n    __self: this\n  }, React.createElement(\"label\", {\n    htmlFor: \"latitude\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 80\n    },\n    __self: this\n  }, \"Latitude\"), React.createElement(\"input\", {\n    type: \"number\",\n    name: \"latitude\",\n    id: \"latitude\",\n    required: true,\n    value: latitude,\n    onChange: e => setLatitude(e.target.value) // armazena o valor de um input digitado pelo usuário em um valor do estado\n    ,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 81\n    },\n    __self: this\n  })), React.createElement(\"div\", {\n    className: \"input-block\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 90\n    },\n    __self: this\n  }, React.createElement(\"label\", {\n    htmlFor: \"longitude\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 91\n    },\n    __self: this\n  }, \"Longitude\"), React.createElement(\"input\", {\n    type: \"number\",\n    name: \"longitude\",\n    id: \"longitude\",\n    required: true,\n    value: longitude,\n    onChange: e => setLongitude(e.target.value),\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 92\n    },\n    __self: this\n  }))), React.createElement(\"button\", {\n    type: \"submit\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 101\n    },\n    __self: this\n  }, \"Salvar\"));\n}\n\n;\nexport default DevForm;","map":{"version":3,"sources":["D:/Arquivos_-_USP/Cursos/OmniStack/web/src/components/DevForm/index.js"],"names":["React","useState","useEffect","DevForm","onSubmit","github_username","setGithub_username","techs","setTechs","latitude","setLatitude","longitude","setLongitude","navigator","geolocation","getCurrentPosition","position","coords","console","log","err","timeout","handleSubmit","e","preventDefault","target","value"],"mappings":";;AAAA,OAAOA,KAAP,IAAiBC,QAAjB,EAA2BC,SAA3B,QAA4C,OAA5C;AAEA,OAAO,cAAP;;AAEA,SAASC,OAAT,CAAiB;AAAEC,EAAAA;AAAF,CAAjB,EAA+B;AAAA,oBACmBH,QAAQ,CAAC,EAAD,CAD3B;AAAA;AAAA,QACpBI,eADoB;AAAA,QACHC,kBADG;;AAAA,qBAEDL,QAAQ,CAAC,EAAD,CAFP;AAAA;AAAA,QAEpBM,KAFoB;AAAA,QAEbC,QAFa;;AAAA,qBAGKP,QAAQ,CAAC,EAAD,CAHb;AAAA;AAAA,QAGpBQ,QAHoB;AAAA,QAGVC,WAHU,kBAGmB;;;AAHnB,qBAIOT,QAAQ,CAAC,EAAD,CAJf;AAAA;AAAA,QAIpBU,SAJoB;AAAA,QAITC,YAJS,kBAK3B;;;AAEAV,EAAAA,SAAS,CAAC,MAAM;AACZW,IAAAA,SAAS,CAACC,WAAV,CAAsBC,kBAAtB,EAA0C;AACrCC,IAAAA,QAAD,IAAc;AAAA,+BACsBA,QAAQ,CAACC,MAD/B;AAAA,YACFR,QADE,oBACFA,QADE;AAAA,YACQE,SADR,oBACQA,SADR,EAGV;;AACAD,MAAAA,WAAW,CAACD,QAAD,CAAX;AACAG,MAAAA,YAAY,CAACD,SAAD,CAAZ;AAEAO,MAAAA,OAAO,CAACC,GAAR,CAAYH,QAAZ;AACH,KATL,EAWKI,GAAD,IAAS;AACLF,MAAAA,OAAO,CAACC,GAAR,CAAYC,GAAZ;AACH,KAbL,EAeI;AACIC,MAAAA,OAAO,EAAE;AADb,KAfJ;AAoBH,GArBQ,EAqBN,EArBM,CAAT;;AAuBA,iBAAeC,YAAf,CAA4BC,CAA5B,EAA+B;AAC3BA,IAAAA,CAAC,CAACC,cAAF;AAEA,UAAMpB,QAAQ,CAAC;AAAE;AACbC,MAAAA,eADW;AAEXE,MAAAA,KAFW;AAGXE,MAAAA,QAHW;AAIXE,MAAAA;AAJW,KAAD,CAAd,CAH2B,CAU3B;AACA;;AACAL,IAAAA,kBAAkB,CAAC,EAAD,CAAlB;AACAE,IAAAA,QAAQ,CAAC,EAAD,CAAR;AAGH;;AAGD,SACI;AAAM,IAAA,QAAQ,EAAEc;AAAY;AAA5B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACI;AAAK,IAAA,SAAS,EAAC,aAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACA;AAAO,IAAA,OAAO,EAAC,iBAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,4BADA,EAEA;AACI,IAAA,IAAI,EAAC,iBADT;AAEI,IAAA,EAAE,EAAC,iBAFP;AAGI,IAAA,QAAQ,MAHZ;AAII,IAAA,KAAK,EAAEjB,eAJX;AAKI,IAAA,QAAQ,EAAEkB,CAAC,IAAIjB,kBAAkB,CAACiB,CAAC,CAACE,MAAF,CAASC,KAAV,CALrC,CAKsD;AALtD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IAFA,CADJ,EAYI;AAAK,IAAA,SAAS,EAAC,aAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACA;AAAO,IAAA,OAAO,EAAC,OAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,mBADA,EAEA;AACI,IAAA,IAAI,EAAC,OADT;AAEI,IAAA,EAAE,EAAC,OAFP;AAGI,IAAA,QAAQ,MAHZ;AAII,IAAA,KAAK,EAAEnB,KAJX;AAKI,IAAA,QAAQ,EAAEgB,CAAC,IAAIf,QAAQ,CAACe,CAAC,CAACE,MAAF,CAASC,KAAV,CAL3B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IAFA,CAZJ,EAuBI;AAAK,IAAA,SAAS,EAAC,aAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACI;AAAK,IAAA,SAAS,EAAC,aAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACA;AAAO,IAAA,OAAO,EAAC,UAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,gBADA,EAEA;AACI,IAAA,IAAI,EAAC,QADT;AAEI,IAAA,IAAI,EAAC,UAFT;AAGI,IAAA,EAAE,EAAC,UAHP;AAII,IAAA,QAAQ,MAJZ;AAIa,IAAA,KAAK,EAAEjB,QAJpB;AAKI,IAAA,QAAQ,EAAEc,CAAC,IAAIb,WAAW,CAACa,CAAC,CAACE,MAAF,CAASC,KAAV,CAL9B,CAKkD;AALlD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IAFA,CADJ,EAYI;AAAK,IAAA,SAAS,EAAC,aAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACA;AAAO,IAAA,OAAO,EAAC,WAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,iBADA,EAEA;AACI,IAAA,IAAI,EAAC,QADT;AAEI,IAAA,IAAI,EAAC,WAFT;AAGI,IAAA,EAAE,EAAC,WAHP;AAII,IAAA,QAAQ,MAJZ;AAIa,IAAA,KAAK,EAAEf,SAJpB;AAKI,IAAA,QAAQ,EAAEY,CAAC,IAAIX,YAAY,CAACW,CAAC,CAACE,MAAF,CAASC,KAAV,CAL/B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IAFA,CAZJ,CAvBJ,EA8CI;AAAQ,IAAA,IAAI,EAAC,QAAb;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,cA9CJ,CADJ;AAmDH;;AAAA;AAED,eAAevB,OAAf","sourcesContent":["import React , { useState, useEffect } from 'react';\r\n\r\nimport './styles.css';\r\n\r\nfunction DevForm({ onSubmit }) {\r\n    const [github_username, setGithub_username] = useState('');\r\n    const [techs, setTechs] = useState('');\r\n    const [latitude, setLatitude] = useState(''); // [] é vetor\r\n    const [longitude, setLongitude] = useState('');\r\n    // quando algo for digitado em um dos campos eu terei acesso em tempo real desses dados\r\n\r\n    useEffect(() => {\r\n        navigator.geolocation.getCurrentPosition( // Em algum momento, o navegador vai me perguntar se eu permito que ele pegue minha localização. A permissão só precisa ser dada uma vez\r\n            (position) => {\r\n                const { latitude, longitude } = position.coords;\r\n\r\n                // cada vez que eu chamo essas funções abaixo, os estados são atualizados e o HTML é processado novamente com as alterações\r\n                setLatitude(latitude);\r\n                setLongitude(longitude);\r\n\r\n                console.log(position);\r\n            },\r\n\r\n            (err) => {\r\n                console.log(err)\r\n            },\r\n\r\n            {\r\n                timeout: 30000,\r\n            }\r\n\r\n        )\r\n    }, []);\r\n    \r\n    async function handleSubmit(e) {\r\n        e.preventDefault();\r\n        \r\n        await onSubmit({ // como handleAddDev é assincrona pode-se aguardar sua finalização usando o await\r\n            github_username,\r\n            techs,\r\n            latitude,\r\n            longitude,\r\n        });\r\n\r\n        // os valores o usuario do git e tecnologias é zerado \r\n        // isso só ocorre depois que onSubmit, finalizar\r\n        setGithub_username('');\r\n        setTechs('');\r\n\r\n\r\n    }\r\n\r\n\r\n    return(\r\n        <form onSubmit={handleSubmit/* função disparada quando o usuario aperta para salvar*/}>\r\n            <div className=\"input-block\">\r\n            <label htmlFor=\"github_username\" >Usuário do Github</label>\r\n            <input\r\n                name=\"github_username\"\r\n                id=\"github_username\"\r\n                required\r\n                value={github_username}\r\n                onChange={e => setGithub_username(e.target.value)}// e é de evento\r\n            />\r\n            </div>\r\n\r\n            <div className=\"input-block\">\r\n            <label htmlFor=\"techs\" >Tecnologias</label>\r\n            <input\r\n                name=\"techs\"\r\n                id=\"techs\"\r\n                required\r\n                value={techs}\r\n                onChange={e => setTechs(e.target.value)}\r\n            />\r\n            </div>\r\n\r\n            <div className=\"input-group\">\r\n                <div className=\"input-block\">\r\n                <label htmlFor=\"latitude\" >Latitude</label>\r\n                <input\r\n                    type=\"number\"\r\n                    name=\"latitude\"\r\n                    id=\"latitude\"\r\n                    required value={latitude}\r\n                    onChange={e => setLatitude(e.target.value)}   // armazena o valor de um input digitado pelo usuário em um valor do estado\r\n                />\r\n                </div>\r\n\r\n                <div className=\"input-block\">\r\n                <label htmlFor=\"longitude\" >Longitude</label>\r\n                <input\r\n                    type=\"number\"\r\n                    name=\"longitude\"\r\n                    id=\"longitude\"\r\n                    required value={longitude}\r\n                    onChange={e => setLongitude(e.target.value)}\r\n                />\r\n                </div>\r\n            </div>\r\n            <button type=\"submit\">Salvar</button>\r\n        </form>\r\n    );\r\n\r\n};\r\n\r\nexport default DevForm;\r\n"]},"metadata":{},"sourceType":"module"}