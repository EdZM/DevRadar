{"ast":null,"code":"import _slicedToArray from \"D:\\\\Arquivos_-_USP\\\\Cursos\\\\OmniStack\\\\web\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/slicedToArray\";\nvar _jsxFileName = \"D:\\\\Arquivos_-_USP\\\\Cursos\\\\OmniStack\\\\web\\\\src\\\\App.js\";\nimport React, { useState, useEffect } from 'react'; //Sempre que for usar HTML dentro do JS preciso importar o react\n\nimport api from './services/api';\n/*\nimport React, { useState } from 'react'; //Sempre que for usar HTML dentro do JS preciso importar o react\n\nuseState é uma função para criar estados\n*********************************3 Conceitos importantes do React\nComponente:  função que retorna um conteudo HTML, CSS, JS. Pode ser repetível/replicável\n             -oficialmente: Bloco isolado de HTML, CSS e JS, o qual não interfere no restante da aplicação\n\nPropriedade: é quando eu faço passagem de atributos para um componente do React \n             -oficialmente: Informações que um componente PAI passa para o componente FILHO\n\nEstado: informação manipulada/mantida pelo componente (lembrar: imutabilidade)\n\n// É bom ter só um componente por arquivo\n// import Header from './Header';\n// function App() { // primeira letra SEMPRE maiúscula\n//   return ( // não posso ter um componente um embaixo do outro sem ter um componente por volta deles(por isso incluí o div, mas isso atrapalha a estilização do código)\n//     // a alternativa ao div é a tag vazia\n//     <> \n//       <Header title=\"Titulo 1\" />\n//       <Header title=\"Titulo 2\" />\n//       <Header title=\"Titulo 4\" />\n//     </>\n//   );\n// }\n\n// função propria de um componente é criada dentro dele mesmo\nfunction App() { // primeira letra SEMPRE maiúscula\n  const [counter, setCounter] = useState(0); // retorna um vetor com duas informaçoes(necessario haver uma desestruturação para pegar esses dados)\n  \n  // quando a função setCounter é chamada, ela sempre cria um novo counter com base no valor anterior dessa variavel\n  // o fato de um novo counter ser criado tem a ver com a ideia de imutabilidade\n  function incrementCounter() {\n    setCounter(counter + 1);\n  }\n  \n  return ( // não posso ter um componente um embaixo do outro sem ter um componente por volta deles(por isso incluí o div, mas isso atrapalha a estilização do código)\n    // a alternativa ao div é a tag vazia\n    // {} depois de um atributo é para incluir JS no HTMl\n    <>\n      <h1>Contador: {counter}</h1>\n      <button onClick={incrementCounter}>Incrementar</button>\n    </>\n  );\n}\n\n*/\n\nimport './global.css';\nimport './App.css';\nimport './Sidebar.css';\nimport './Main.css';\nimport DevItem from './components/DevItem';\nimport DevForm from './components/DevForm'; // navigator.geolocation.getCurrentPosition -> se puser aqui vai ser executado uma unica vez no ciclo de vida da aplicação\n\nfunction App() {\n  // quando o estado for alterado, ele irá renderizar o componente novamente\n  const _useState = useState([]),\n        _useState2 = _slicedToArray(_useState, 2),\n        devs = _useState2[0],\n        setDevs = _useState2[1]; // a busca dos devs na api deve acontecer uma unica vez dentro do ciclo de renderização do componente\n  // o [](array vazio) garante a execução única \n\n\n  useEffect(() => {\n    async function loadDevs() {\n      const response = await api.get('/devs'); // devem ser armazenados dentro de algum estado para poderem ser mostrados depois em tela      \n\n      setDevs(response.data);\n    }\n\n    loadDevs();\n  }, []);\n\n  async function handleAddDev(data) {\n    const response = await api.post('/devs', data); //console.log(response.data);\n    // adição num array em JS\n\n    setDevs([...devs, response.data]); //garante que ao cadastrar um nome ele ja apareça na tela\n  }\n\n  return React.createElement(\"div\", {\n    id: \"app\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 91\n    },\n    __self: this\n  }, React.createElement(\"aside\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 92\n    },\n    __self: this\n  }, React.createElement(\"strong\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 93\n    },\n    __self: this\n  }, \"Cadastrar\"), React.createElement(DevForm, {\n    onSubmit: handleAddDev,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 94\n    },\n    __self: this\n  })), React.createElement(\"main\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 97\n    },\n    __self: this\n  }, React.createElement(\"ul\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 98\n    },\n    __self: this\n  }, devs.map(dev => React.createElement(DevItem, {\n    key: dev._id,\n    dev: dev,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 100\n    },\n    __self: this\n  })))));\n}\n\nexport default App;","map":{"version":3,"sources":["D:/Arquivos_-_USP/Cursos/OmniStack/web/src/App.js"],"names":["React","useState","useEffect","api","DevItem","DevForm","App","devs","setDevs","loadDevs","response","get","data","handleAddDev","post","map","dev","_id"],"mappings":";;AAAA,OAAOA,KAAP,IAAgBC,QAAhB,EAA0BC,SAA1B,QAA2C,OAA3C,C,CAAoD;;AACpD,OAAOC,GAAP,MAAgB,gBAAhB;AACA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAgDA,OAAO,cAAP;AACA,OAAO,WAAP;AACA,OAAO,eAAP;AACA,OAAO,YAAP;AACA,OAAOC,OAAP,MAAoB,sBAApB;AACA,OAAOC,OAAP,MAAoB,sBAApB,C,CAGA;;AAEA,SAASC,GAAT,GAAe;AAEb;AAFa,oBAIWL,QAAQ,CAAC,EAAD,CAJnB;AAAA;AAAA,QAINM,IAJM;AAAA,QAIAC,OAJA,kBASb;AACA;;;AACAN,EAAAA,SAAS,CAAC,MAAM;AACd,mBAAeO,QAAf,GAAyB;AACvB,YAAMC,QAAQ,GAAG,MAAMP,GAAG,CAACQ,GAAJ,CAAQ,OAAR,CAAvB,CADuB,CACkB;;AACzCH,MAAAA,OAAO,CAACE,QAAQ,CAACE,IAAV,CAAP;AACD;;AAEDH,IAAAA,QAAQ;AACT,GAPQ,EAON,EAPM,CAAT;;AAUA,iBAAeI,YAAf,CAA4BD,IAA5B,EAAkC;AAChC,UAAMF,QAAQ,GAAG,MAAMP,GAAG,CAACW,IAAJ,CAAS,OAAT,EAAiBF,IAAjB,CAAvB,CADgC,CAEhC;AACA;;AACAJ,IAAAA,OAAO,CAAC,CAAC,GAAGD,IAAJ,EAAUG,QAAQ,CAACE,IAAnB,CAAD,CAAP,CAJgC,CAIG;AAEpC;;AAED,SACE;AAAK,IAAA,EAAE,EAAC,KAAR;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,iBADF,EAEE,oBAAC,OAAD;AAAS,IAAA,QAAQ,EAAEC,YAAnB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IAFF,CADF,EAME;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACGN,IAAI,CAACQ,GAAL,CAASC,GAAG,IACX,oBAAC,OAAD;AAAS,IAAA,GAAG,EAAEA,GAAG,CAACC,GAAlB;AAAuB,IAAA,GAAG,EAAED,GAA5B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IADD,CADH,CADF,CANF,CADF;AAmBD;;AAID,eAAeV,GAAf","sourcesContent":["import React, { useState, useEffect } from 'react'; //Sempre que for usar HTML dentro do JS preciso importar o react\nimport api from './services/api';\n/*\nimport React, { useState } from 'react'; //Sempre que for usar HTML dentro do JS preciso importar o react\n\nuseState é uma função para criar estados\n*********************************3 Conceitos importantes do React\nComponente:  função que retorna um conteudo HTML, CSS, JS. Pode ser repetível/replicável\n             -oficialmente: Bloco isolado de HTML, CSS e JS, o qual não interfere no restante da aplicação\n\nPropriedade: é quando eu faço passagem de atributos para um componente do React \n             -oficialmente: Informações que um componente PAI passa para o componente FILHO\n\nEstado: informação manipulada/mantida pelo componente (lembrar: imutabilidade)\n\n// É bom ter só um componente por arquivo\n// import Header from './Header';\n// function App() { // primeira letra SEMPRE maiúscula\n//   return ( // não posso ter um componente um embaixo do outro sem ter um componente por volta deles(por isso incluí o div, mas isso atrapalha a estilização do código)\n//     // a alternativa ao div é a tag vazia\n//     <> \n//       <Header title=\"Titulo 1\" />\n//       <Header title=\"Titulo 2\" />\n//       <Header title=\"Titulo 4\" />\n//     </>\n//   );\n// }\n\n// função propria de um componente é criada dentro dele mesmo\nfunction App() { // primeira letra SEMPRE maiúscula\n  const [counter, setCounter] = useState(0); // retorna um vetor com duas informaçoes(necessario haver uma desestruturação para pegar esses dados)\n  \n  // quando a função setCounter é chamada, ela sempre cria um novo counter com base no valor anterior dessa variavel\n  // o fato de um novo counter ser criado tem a ver com a ideia de imutabilidade\n  function incrementCounter() {\n    setCounter(counter + 1);\n  }\n  \n  return ( // não posso ter um componente um embaixo do outro sem ter um componente por volta deles(por isso incluí o div, mas isso atrapalha a estilização do código)\n    // a alternativa ao div é a tag vazia\n    // {} depois de um atributo é para incluir JS no HTMl\n    <>\n      <h1>Contador: {counter}</h1>\n      <button onClick={incrementCounter}>Incrementar</button>\n    </>\n  );\n}\n\n*/\n\nimport './global.css';\nimport './App.css';\nimport './Sidebar.css';\nimport './Main.css';\nimport DevItem from './components/DevItem';\nimport DevForm from './components/DevForm';\n\n\n// navigator.geolocation.getCurrentPosition -> se puser aqui vai ser executado uma unica vez no ciclo de vida da aplicação\n\nfunction App() {\n  \n  // quando o estado for alterado, ele irá renderizar o componente novamente\n  \n  const [devs, setDevs] = useState([]);\n  \n  \n \n    \n  // a busca dos devs na api deve acontecer uma unica vez dentro do ciclo de renderização do componente\n  // o [](array vazio) garante a execução única \n  useEffect(() => {\n    async function loadDevs(){\n      const response = await api.get('/devs'); // devem ser armazenados dentro de algum estado para poderem ser mostrados depois em tela      \n      setDevs(response.data);\n    }\n\n    loadDevs();\n  }, []);\n\n\n  async function handleAddDev(data) {\n    const response = await api.post('/devs',data);\n    //console.log(response.data);\n    // adição num array em JS\n    setDevs([...devs, response.data]); //garante que ao cadastrar um nome ele ja apareça na tela\n\n  }\n\n  return(\n    <div id=\"app\">\n      <aside>\n        <strong>Cadastrar</strong>\n        <DevForm onSubmit={handleAddDev}/>\n      </aside>\n\n      <main>\n        <ul>\n          {devs.map(dev => (\n            <DevItem key={dev._id} dev={dev} />\n          ))}\n        </ul>\n      </main>\n    </div>  \n\n  );\n\n\n}\n\n\n\nexport default App;\n"]},"metadata":{},"sourceType":"module"}