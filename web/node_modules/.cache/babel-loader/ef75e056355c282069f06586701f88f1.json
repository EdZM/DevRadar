{"ast":null,"code":"import _slicedToArray from \"D:\\\\Arquivos_-_USP\\\\Cursos\\\\OmniStack\\\\web\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/slicedToArray\";\nvar _jsxFileName = \"D:\\\\Arquivos_-_USP\\\\Cursos\\\\OmniStack\\\\web\\\\src\\\\App.js\";\nimport React, { useState, useEffect } from 'react'; //Sempre que for usar HTML dentro do JS preciso importar o react\n\nimport api from './services/api';\n/*\nimport React, { useState } from 'react'; //Sempre que for usar HTML dentro do JS preciso importar o react\n\nuseState é uma função para criar estados\n3 Conceitos importantes do React\nComponente:  função que retorna um conteudo HTML, CSS, JS. Pode ser repetível/replicável\n             -oficialmente: Bloco isolado de HTML, CSS e JS, o qual não interfere no restante da aplicação\n\nPropriedade: é quando eu faço passagem de atributos para um componente do React \n             -oficialmente: Informações que um componente PAI passa para o componente FILHO\n\nEstado: informação manipulada/mantida pelo componente (lembrar: imutabilidade)\n\n// É bom ter só um componente por arquivo\n// import Header from './Header';\n// function App() { // primeira letra SEMPRE maiúscula\n//   return ( // não posso ter um componente um embaixo do outro sem ter um componente por volta deles(por isso incluí o div, mas isso atrapalha a estilização do código)\n//     // a alternativa ao div é a tag vazia\n//     <> \n//       <Header title=\"Titulo 1\" />\n//       <Header title=\"Titulo 2\" />\n//       <Header title=\"Titulo 4\" />\n//     </>\n//   );\n// }\n\n// função propria de um componente é criada dentro dele mesmo\nfunction App() { // primeira letra SEMPRE maiúscula\n  const [counter, setCounter] = useState(0); // retorna um vetor com duas informaçoes(necessario haver uma desestruturação para pegar esses dados)\n  \n  // quando a função setCounter é chamada, ela sempre cria um novo counter com base no valor anterior dessa variavel\n  // o fato de um novo counter ser criado tem a ver com a ideia de imutabilidade\n  function incrementCounter() {\n    setCounter(counter + 1);\n  }\n  \n  return ( // não posso ter um componente um embaixo do outro sem ter um componente por volta deles(por isso incluí o div, mas isso atrapalha a estilização do código)\n    // a alternativa ao div é a tag vazia\n    // {} depois de um atributo é para incluir JS no HTMl\n    <>\n      <h1>Contador: {counter}</h1>\n      <button onClick={incrementCounter}>Incrementar</button>\n    </>\n  );\n}\n\n*/\n\nimport './global.css';\nimport './App.css';\nimport './Sidebar.css';\nimport './Main.css';\nimport DevItem from './components/DevItem'; // navigator.geolocation.getCurrentPosition -> se puser aqui vai ser executado uma unica vez no ciclo de vida da aplicação\n\nfunction App() {\n  // quando o estado for alterado, ele irá renderizar o componente novamente\n  const _useState = useState([]),\n        _useState2 = _slicedToArray(_useState, 2),\n        devs = _useState2[0],\n        setDevs = _useState2[1];\n\n  const _useState3 = useState(''),\n        _useState4 = _slicedToArray(_useState3, 2),\n        github_username = _useState4[0],\n        setGithub_username = _useState4[1];\n\n  const _useState5 = useState(''),\n        _useState6 = _slicedToArray(_useState5, 2),\n        techs = _useState6[0],\n        setTechs = _useState6[1];\n\n  const _useState7 = useState(''),\n        _useState8 = _slicedToArray(_useState7, 2),\n        latitude = _useState8[0],\n        setLatitude = _useState8[1]; // [] é vetor\n\n\n  const _useState9 = useState(''),\n        _useState10 = _slicedToArray(_useState9, 2),\n        longitude = _useState10[0],\n        setLongitude = _useState10[1]; // quando algo for digitado em um dos campos eu terei acesso em tempo real desses dados\n\n\n  useEffect(() => {\n    navigator.geolocation.getCurrentPosition( // Em algum momento, o navegador vai me perguntar se eu permito que ele pegue minha localização. A permissão só precisa ser dada uma vez\n    position => {\n      const _position$coords = position.coords,\n            latitude = _position$coords.latitude,\n            longitude = _position$coords.longitude; // cada vez que eu chamo essas funções abaixo, os estados são atualizados e o HTML é processado novamente com as alterações\n\n      setLatitude(latitude);\n      setLongitude(longitude);\n      console.log(position);\n    }, err => {\n      console.log(err);\n    }, {\n      timeout: 30000\n    });\n  }, []); // a busca dos devs na api deve acontecer uma unica vez dentro do ciclo de renderização do componente\n  // o [](array vazio) garante a execução única \n\n  useEffect(() => {\n    async function loadDevs() {\n      const response = await api.get('/devs'); // devem ser armazenados dentro de algum estado para poderem ser mostrados depois em tela      \n\n      setDevs(response.data);\n    }\n\n    loadDevs();\n  }, []);\n\n  async function handleAddDev(e) {\n    e.preventDefault();\n    const response = await api.post('/devs', {\n      github_username,\n      techs,\n      latitude,\n      longitude\n    }); //console.log(response.data);\n\n    setGithub_username('');\n    setTechs(''); // adição num array em JS\n\n    setDevs([...devs, response.data]); //garante que ao cadastrar um nome ele ja apareça na tela\n  }\n\n  return React.createElement(\"div\", {\n    id: \"app\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 130\n    },\n    __self: this\n  }, React.createElement(\"aside\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 131\n    },\n    __self: this\n  }, React.createElement(\"strong\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 132\n    },\n    __self: this\n  }, \"Cadastrar\"), React.createElement(\"form\", {\n    onSubmit: handleAddDev\n    /* função disparada quando o usuario aperta para salvar*/\n    ,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 133\n    },\n    __self: this\n  }, React.createElement(\"div\", {\n    className: \"input-block\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 134\n    },\n    __self: this\n  }, React.createElement(\"label\", {\n    htmlFor: \"github_username\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 135\n    },\n    __self: this\n  }, \"Usu\\xE1rio do Github\"), React.createElement(\"input\", {\n    name: \"github_username\",\n    id: \"github_username\",\n    required: true,\n    value: github_username,\n    onChange: e => setGithub_username(e.target.value) // e é de evento\n    ,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 136\n    },\n    __self: this\n  })), React.createElement(\"div\", {\n    className: \"input-block\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 145\n    },\n    __self: this\n  }, React.createElement(\"label\", {\n    htmlFor: \"techs\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 146\n    },\n    __self: this\n  }, \"Tecnologias\"), React.createElement(\"input\", {\n    name: \"techs\",\n    id: \"techs\",\n    required: true,\n    value: techs,\n    onChange: e => setTechs(e.target.value),\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 147\n    },\n    __self: this\n  })), React.createElement(\"div\", {\n    className: \"input-group\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 156\n    },\n    __self: this\n  }, React.createElement(\"div\", {\n    className: \"input-block\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 157\n    },\n    __self: this\n  }, React.createElement(\"label\", {\n    htmlFor: \"latitude\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 158\n    },\n    __self: this\n  }, \"Latitude\"), React.createElement(\"input\", {\n    type: \"number\",\n    name: \"latitude\",\n    id: \"latitude\",\n    required: true,\n    value: latitude,\n    onChange: e => setLatitude(e.target.value) // armazena o valor de um input digitado pelo usuário em um valor do estado\n    ,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 159\n    },\n    __self: this\n  })), React.createElement(\"div\", {\n    className: \"input-block\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 168\n    },\n    __self: this\n  }, React.createElement(\"label\", {\n    htmlFor: \"longitude\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 169\n    },\n    __self: this\n  }, \"Longitude\"), React.createElement(\"input\", {\n    type: \"number\",\n    name: \"longitude\",\n    id: \"longitude\",\n    required: true,\n    value: longitude,\n    onChange: e => setLongitude(e.target.value),\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 170\n    },\n    __self: this\n  }))), React.createElement(\"button\", {\n    type: \"submit\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 179\n    },\n    __self: this\n  }, \"Salvar\"))), React.createElement(\"main\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 184\n    },\n    __self: this\n  }, React.createElement(\"ul\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 185\n    },\n    __self: this\n  }, devs.map(dev => React.createElement(DevItem, {\n    key: dev._id,\n    dev: dev,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 187\n    },\n    __self: this\n  })))));\n}\n\nexport default App;","map":{"version":3,"sources":["D:/Arquivos_-_USP/Cursos/OmniStack/web/src/App.js"],"names":["React","useState","useEffect","api","DevItem","App","devs","setDevs","github_username","setGithub_username","techs","setTechs","latitude","setLatitude","longitude","setLongitude","navigator","geolocation","getCurrentPosition","position","coords","console","log","err","timeout","loadDevs","response","get","data","handleAddDev","e","preventDefault","post","target","value","map","dev","_id"],"mappings":";;AAAA,OAAOA,KAAP,IAAgBC,QAAhB,EAA0BC,SAA1B,QAA2C,OAA3C,C,CAAoD;;AACpD,OAAOC,GAAP,MAAgB,gBAAhB;AACA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAgDA,OAAO,cAAP;AACA,OAAO,WAAP;AACA,OAAO,eAAP;AACA,OAAO,YAAP;AACA,OAAOC,OAAP,MAAoB,sBAApB,C,CAGA;;AAEA,SAASC,GAAT,GAAe;AAEb;AAFa,oBAIWJ,QAAQ,CAAC,EAAD,CAJnB;AAAA;AAAA,QAINK,IAJM;AAAA,QAIAC,OAJA;;AAAA,qBAKiCN,QAAQ,CAAC,EAAD,CALzC;AAAA;AAAA,QAKNO,eALM;AAAA,QAKWC,kBALX;;AAAA,qBAMaR,QAAQ,CAAC,EAAD,CANrB;AAAA;AAAA,QAMNS,KANM;AAAA,QAMCC,QAND;;AAAA,qBAOmBV,QAAQ,CAAC,EAAD,CAP3B;AAAA;AAAA,QAONW,QAPM;AAAA,QAOIC,WAPJ,kBAOiC;;;AAPjC,qBAQqBZ,QAAQ,CAAC,EAAD,CAR7B;AAAA;AAAA,QAQNa,SARM;AAAA,QAQKC,YARL,mBASb;;;AAGAb,EAAAA,SAAS,CAAC,MAAM;AACdc,IAAAA,SAAS,CAACC,WAAV,CAAsBC,kBAAtB,EAA0C;AACvCC,IAAAA,QAAD,IAAc;AAAA,+BACkBA,QAAQ,CAACC,MAD3B;AAAA,YACLR,QADK,oBACLA,QADK;AAAA,YACKE,SADL,oBACKA,SADL,EAGZ;;AACAD,MAAAA,WAAW,CAACD,QAAD,CAAX;AACAG,MAAAA,YAAY,CAACD,SAAD,CAAZ;AAEAO,MAAAA,OAAO,CAACC,GAAR,CAAYH,QAAZ;AACD,KATH,EAWGI,GAAD,IAAS;AACPF,MAAAA,OAAO,CAACC,GAAR,CAAYC,GAAZ;AACD,KAbH,EAeE;AACEC,MAAAA,OAAO,EAAE;AADX,KAfF;AAoBD,GArBQ,EAqBN,EArBM,CAAT,CAZa,CAmCb;AACA;;AACAtB,EAAAA,SAAS,CAAC,MAAM;AACd,mBAAeuB,QAAf,GAAyB;AACvB,YAAMC,QAAQ,GAAG,MAAMvB,GAAG,CAACwB,GAAJ,CAAQ,OAAR,CAAvB,CADuB,CACkB;;AACzCpB,MAAAA,OAAO,CAACmB,QAAQ,CAACE,IAAV,CAAP;AACD;;AAEDH,IAAAA,QAAQ;AACT,GAPQ,EAON,EAPM,CAAT;;AAUA,iBAAeI,YAAf,CAA4BC,CAA5B,EAA+B;AAC7BA,IAAAA,CAAC,CAACC,cAAF;AAEA,UAAML,QAAQ,GAAG,MAAMvB,GAAG,CAAC6B,IAAJ,CAAS,OAAT,EAAiB;AACtCxB,MAAAA,eADsC;AAEtCE,MAAAA,KAFsC;AAGtCE,MAAAA,QAHsC;AAItCE,MAAAA;AAJsC,KAAjB,CAAvB,CAH6B,CAU7B;;AAEAL,IAAAA,kBAAkB,CAAC,EAAD,CAAlB;AACAE,IAAAA,QAAQ,CAAC,EAAD,CAAR,CAb6B,CAc7B;;AACAJ,IAAAA,OAAO,CAAC,CAAC,GAAGD,IAAJ,EAAUoB,QAAQ,CAACE,IAAnB,CAAD,CAAP,CAf6B,CAeM;AAGpC;;AAID,SACE;AAAK,IAAA,EAAE,EAAC,KAAR;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,iBADF,EAEE;AAAM,IAAA,QAAQ,EAAEC;AAAY;AAA5B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACE;AAAK,IAAA,SAAS,EAAC,aAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACE;AAAO,IAAA,OAAO,EAAC,iBAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,4BADF,EAEE;AACE,IAAA,IAAI,EAAC,iBADP;AAEE,IAAA,EAAE,EAAC,iBAFL;AAGE,IAAA,QAAQ,MAHV;AAIE,IAAA,KAAK,EAAErB,eAJT;AAKE,IAAA,QAAQ,EAAEsB,CAAC,IAAIrB,kBAAkB,CAACqB,CAAC,CAACG,MAAF,CAASC,KAAV,CALnC,CAKqD;AALrD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IAFF,CADF,EAYE;AAAK,IAAA,SAAS,EAAC,aAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACE;AAAO,IAAA,OAAO,EAAC,OAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,mBADF,EAEE;AACE,IAAA,IAAI,EAAC,OADP;AAEE,IAAA,EAAE,EAAC,OAFL;AAGE,IAAA,QAAQ,MAHV;AAIE,IAAA,KAAK,EAAExB,KAJT;AAKE,IAAA,QAAQ,EAAEoB,CAAC,IAAInB,QAAQ,CAACmB,CAAC,CAACG,MAAF,CAASC,KAAV,CALzB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IAFF,CAZF,EAuBE;AAAK,IAAA,SAAS,EAAC,aAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACE;AAAK,IAAA,SAAS,EAAC,aAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACE;AAAO,IAAA,OAAO,EAAC,UAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,gBADF,EAEE;AACE,IAAA,IAAI,EAAC,QADP;AAEE,IAAA,IAAI,EAAC,UAFP;AAGE,IAAA,EAAE,EAAC,UAHL;AAIE,IAAA,QAAQ,MAJV;AAIW,IAAA,KAAK,EAAEtB,QAJlB;AAKE,IAAA,QAAQ,EAAGkB,CAAC,IAAIjB,WAAW,CAACiB,CAAC,CAACG,MAAF,CAASC,KAAV,CAL7B,CAKiD;AALjD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IAFF,CADF,EAYE;AAAK,IAAA,SAAS,EAAC,aAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACE;AAAO,IAAA,OAAO,EAAC,WAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,iBADF,EAEE;AACE,IAAA,IAAI,EAAC,QADP;AAEE,IAAA,IAAI,EAAC,WAFP;AAGE,IAAA,EAAE,EAAC,WAHL;AAIE,IAAA,QAAQ,MAJV;AAIW,IAAA,KAAK,EAAEpB,SAJlB;AAKE,IAAA,QAAQ,EAAEgB,CAAC,IAAIf,YAAY,CAACe,CAAC,CAACG,MAAF,CAASC,KAAV,CAL7B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IAFF,CAZF,CAvBF,EA8CE;AAAQ,IAAA,IAAI,EAAC,QAAb;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,cA9CF,CAFF,CADF,EAsDE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACG5B,IAAI,CAAC6B,GAAL,CAASC,GAAG,IACX,oBAAC,OAAD;AAAS,IAAA,GAAG,EAAEA,GAAG,CAACC,GAAlB;AAAuB,IAAA,GAAG,EAAED,GAA5B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IADD,CADH,CADF,CAtDF,CADF;AAwED;;AAID,eAAe/B,GAAf","sourcesContent":["import React, { useState, useEffect } from 'react'; //Sempre que for usar HTML dentro do JS preciso importar o react\nimport api from './services/api';\n/*\nimport React, { useState } from 'react'; //Sempre que for usar HTML dentro do JS preciso importar o react\n\nuseState é uma função para criar estados\n3 Conceitos importantes do React\nComponente:  função que retorna um conteudo HTML, CSS, JS. Pode ser repetível/replicável\n             -oficialmente: Bloco isolado de HTML, CSS e JS, o qual não interfere no restante da aplicação\n\nPropriedade: é quando eu faço passagem de atributos para um componente do React \n             -oficialmente: Informações que um componente PAI passa para o componente FILHO\n\nEstado: informação manipulada/mantida pelo componente (lembrar: imutabilidade)\n\n// É bom ter só um componente por arquivo\n// import Header from './Header';\n// function App() { // primeira letra SEMPRE maiúscula\n//   return ( // não posso ter um componente um embaixo do outro sem ter um componente por volta deles(por isso incluí o div, mas isso atrapalha a estilização do código)\n//     // a alternativa ao div é a tag vazia\n//     <> \n//       <Header title=\"Titulo 1\" />\n//       <Header title=\"Titulo 2\" />\n//       <Header title=\"Titulo 4\" />\n//     </>\n//   );\n// }\n\n// função propria de um componente é criada dentro dele mesmo\nfunction App() { // primeira letra SEMPRE maiúscula\n  const [counter, setCounter] = useState(0); // retorna um vetor com duas informaçoes(necessario haver uma desestruturação para pegar esses dados)\n  \n  // quando a função setCounter é chamada, ela sempre cria um novo counter com base no valor anterior dessa variavel\n  // o fato de um novo counter ser criado tem a ver com a ideia de imutabilidade\n  function incrementCounter() {\n    setCounter(counter + 1);\n  }\n  \n  return ( // não posso ter um componente um embaixo do outro sem ter um componente por volta deles(por isso incluí o div, mas isso atrapalha a estilização do código)\n    // a alternativa ao div é a tag vazia\n    // {} depois de um atributo é para incluir JS no HTMl\n    <>\n      <h1>Contador: {counter}</h1>\n      <button onClick={incrementCounter}>Incrementar</button>\n    </>\n  );\n}\n\n*/\n\nimport './global.css';\nimport './App.css';\nimport './Sidebar.css';\nimport './Main.css';\nimport DevItem from './components/DevItem';\n\n\n// navigator.geolocation.getCurrentPosition -> se puser aqui vai ser executado uma unica vez no ciclo de vida da aplicação\n\nfunction App() {\n  \n  // quando o estado for alterado, ele irá renderizar o componente novamente\n  \n  const [devs, setDevs] = useState([]);\n  const [github_username, setGithub_username] = useState('');\n  const [techs, setTechs] = useState('');\n  const [latitude, setLatitude] = useState(''); // [] é vetor\n  const [longitude, setLongitude] = useState('');\n  // quando algo for digitado em um dos campos eu terei acesso em tempo real desses dados\n  \n  \n  useEffect(() => {\n    navigator.geolocation.getCurrentPosition( // Em algum momento, o navegador vai me perguntar se eu permito que ele pegue minha localização. A permissão só precisa ser dada uma vez\n      (position) => { \n        const {latitude, longitude} = position.coords;\n        \n        // cada vez que eu chamo essas funções abaixo, os estados são atualizados e o HTML é processado novamente com as alterações\n        setLatitude(latitude); \n        setLongitude(longitude);\n        \n        console.log(position);\n      },\n      \n      (err) => {\n        console.log(err)\n      },\n      \n      {\n        timeout: 30000,\n      }\n\n    )  \n  }, []);\n    \n  // a busca dos devs na api deve acontecer uma unica vez dentro do ciclo de renderização do componente\n  // o [](array vazio) garante a execução única \n  useEffect(() => {\n    async function loadDevs(){\n      const response = await api.get('/devs'); // devem ser armazenados dentro de algum estado para poderem ser mostrados depois em tela      \n      setDevs(response.data);\n    }\n\n    loadDevs();\n  }, []);\n\n\n  async function handleAddDev(e) {\n    e.preventDefault();\n\n    const response = await api.post('/devs',{\n      github_username,\n      techs,\n      latitude,\n      longitude,\n    })\n\n    //console.log(response.data);\n\n    setGithub_username('');\n    setTechs('');\n    // adição num array em JS\n    setDevs([...devs, response.data]); //garante que ao cadastrar um nome ele ja apareça na tela\n\n\n  }\n\n\n\n  return(\n    <div id=\"app\">\n      <aside>\n        <strong>Cadastrar</strong>\n        <form onSubmit={handleAddDev/* função disparada quando o usuario aperta para salvar*/}> \n          <div className=\"input-block\">\n            <label htmlFor=\"github_username\" >Usuário do Github</label>\n            <input \n              name=\"github_username\" \n              id=\"github_username\" \n              required \n              value={github_username}  \n              onChange={e => setGithub_username(e.target.value) }// e é de evento\n            />\n          </div>\n          \n          <div className=\"input-block\">\n            <label htmlFor=\"techs\" >Tecnologias</label>\n            <input \n              name=\"techs\" \n              id=\"techs\" \n              required \n              value={techs}  \n              onChange={e => setTechs(e.target.value)}\n            />\n          </div>\n\n          <div className=\"input-group\">\n            <div className=\"input-block\">\n              <label htmlFor=\"latitude\" >Latitude</label>\n              <input \n                type=\"number\" \n                name=\"latitude\" \n                id=\"latitude\" \n                required value={latitude}\n                onChange= {e => setLatitude(e.target.value)}   // armazena o valor de um input digitado pelo usuário em um valor do estado\n              />\n            </div>\n\n            <div className=\"input-block\">\n              <label htmlFor=\"longitude\" >Longitude</label>\n              <input \n                type=\"number\" \n                name=\"longitude\" \n                id=\"longitude\" \n                required value={longitude} \n                onChange={e => setLongitude(e.target.value)} \n              />\n            </div>\n          </div>\n          <button type=\"submit\">Salvar</button>\n        </form>\n          \n      </aside>\n\n      <main>\n        <ul>\n          {devs.map(dev => (\n            <DevItem key={dev._id} dev={dev} />\n          ))}\n          \n      \n        </ul>\n\n\n\n      </main>\n    </div>  \n\n  );\n\n\n}\n\n\n\nexport default App;\n"]},"metadata":{},"sourceType":"module"}