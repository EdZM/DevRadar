{"ast":null,"code":"import _slicedToArray from \"D:\\\\Arquivos_-_USP\\\\Cursos\\\\OmniStack\\\\web\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/slicedToArray\";\nvar _jsxFileName = \"D:\\\\Arquivos_-_USP\\\\Cursos\\\\OmniStack\\\\web\\\\src\\\\App.js\";\nimport React, { useState } from 'react'; //Sempre que for usar HTML dentro do JS preciso importar o react\n// useState é uma função para criar estados\n// 3 Conceitos importantes do React\n// Componente:  função que retorna um conteudo HTML, CSS, JS. Pode ser repetível/replicável\n//              -oficialmente: Bloco isolado de HTML, CSS e JS, o qual não interfere no restante da aplicação\n// \n// Propriedade: é quando eu faço passagem de atributos para um componente do React \n//              -oficialmente: Informações que um componente PAI passa para o componente FILHO\n//\n// Estado: informação manipulada pelo componente\n// É bom ter só um componente por arquivo\n// import Header from './Header';\n// function App() { // primeira letra SEMPRE maiúscula\n//   return ( // não posso ter um componente um embaixo do outro sem ter um componente por volta deles(por isso incluí o div, mas isso atrapalha a estilização do código)\n//     // a alternativa ao div é a tag vazia\n//     <> \n//       <Header title=\"Titulo 1\" />\n//       <Header title=\"Titulo 2\" />\n//       <Header title=\"Titulo 4\" />\n//     </>\n//   );\n// }\n// função propria de um componente é criada dentro dele mesmo\n\nfunction App() {\n  // primeira letra SEMPRE maiúscula\n  const _useState = useState(0),\n        _useState2 = _slicedToArray(_useState, 2),\n        counter = _useState2[0],\n        setCounter = _useState2[1]; // retorna um vetor com duas informaçoes(necessario haver uma desestruturação para pegar esses dados)\n  // quando a função setCounter é chamada, ela sempre cria um novo counter com base no valor anterior dessa variavel\n\n\n  function incrementCounter() {\n    setCounter(counter + 1);\n  }\n\n  return (// não posso ter um componente um embaixo do outro sem ter um componente por volta deles(por isso incluí o div, mas isso atrapalha a estilização do código)\n    // a alternativa ao div é a tag vazia\n    // {} depois de um atributo é para incluir JS no HTMl\n    React.createElement(React.Fragment, null, React.createElement(\"h1\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 41\n      },\n      __self: this\n    }, \"Contador: 0\"), React.createElement(\"button\", {\n      onClick: incrementCounter,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 42\n      },\n      __self: this\n    }, \"Incrementar\"))\n  );\n}\n\nexport default App;","map":{"version":3,"sources":["D:/Arquivos_-_USP/Cursos/OmniStack/web/src/App.js"],"names":["React","useState","App","counter","setCounter","incrementCounter"],"mappings":";;AAAA,OAAOA,KAAP,IAAgBC,QAAhB,QAAgC,OAAhC,C,CAAyC;AAEzC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;;AAEA,SAASC,GAAT,GAAe;AAAE;AAAF,oBACiBD,QAAQ,CAAC,CAAD,CADzB;AAAA;AAAA,QACNE,OADM;AAAA,QACGC,UADH,kBAC8B;AAE3C;;;AAEA,WAASC,gBAAT,GAA4B;AAC1BD,IAAAA,UAAU,CAACD,OAAO,GAAG,CAAX,CAAV;AACD;;AAED,SAAS;AACP;AACA;AACA,8CACE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,qBADF,EAEE;AAAQ,MAAA,OAAO,EAAEE,gBAAjB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,qBAFF;AAHF;AAQD;;AAGD,eAAeH,GAAf","sourcesContent":["import React, { useState } from 'react'; //Sempre que for usar HTML dentro do JS preciso importar o react\n\n// useState é uma função para criar estados\n// 3 Conceitos importantes do React\n// Componente:  função que retorna um conteudo HTML, CSS, JS. Pode ser repetível/replicável\n//              -oficialmente: Bloco isolado de HTML, CSS e JS, o qual não interfere no restante da aplicação\n// \n// Propriedade: é quando eu faço passagem de atributos para um componente do React \n//              -oficialmente: Informações que um componente PAI passa para o componente FILHO\n//\n// Estado: informação manipulada pelo componente\n\n// É bom ter só um componente por arquivo\n// import Header from './Header';\n// function App() { // primeira letra SEMPRE maiúscula\n//   return ( // não posso ter um componente um embaixo do outro sem ter um componente por volta deles(por isso incluí o div, mas isso atrapalha a estilização do código)\n//     // a alternativa ao div é a tag vazia\n//     <> \n//       <Header title=\"Titulo 1\" />\n//       <Header title=\"Titulo 2\" />\n//       <Header title=\"Titulo 4\" />\n//     </>\n//   );\n// }\n\n// função propria de um componente é criada dentro dele mesmo\n\nfunction App() { // primeira letra SEMPRE maiúscula\n  const [counter, setCounter] = useState(0); // retorna um vetor com duas informaçoes(necessario haver uma desestruturação para pegar esses dados)\n  \n  // quando a função setCounter é chamada, ela sempre cria um novo counter com base no valor anterior dessa variavel\n  \n  function incrementCounter() {\n    setCounter(counter + 1);\n  }\n  \n  return ( // não posso ter um componente um embaixo do outro sem ter um componente por volta deles(por isso incluí o div, mas isso atrapalha a estilização do código)\n    // a alternativa ao div é a tag vazia\n    // {} depois de um atributo é para incluir JS no HTMl\n    <>\n      <h1>Contador: 0</h1>\n      <button onClick={incrementCounter}>Incrementar</button>\n    </>\n  );\n}\n\n\nexport default App;\n"]},"metadata":{},"sourceType":"module"}